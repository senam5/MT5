//+------------------------------------------------------------------+
//|                Scalp MT5 Clone EA (M5) – v1.0                    |
//|  • ±1σ, ±2σ, ±3σ Bollinger Bands                                  |
//|  • Parabolic SAR (step=0.01, max=0.15)                            |
//|  • Primary entry: true ±3σ breach + SAR filter                    |
//|  • Secondary entry: ±2σ breach − 30 points + SAR filter           |
//|  • One trade per 5min candle                                      |
//|  • Fixed SL/TP in points                                          |
//|  • Max trades per side & daily kill-switch                        |
//|                © 2025 Senam Magezi Gbekou                         |
//+------------------------------------------------------------------+
#property copyright "© 2025 Senam Magezi Gbekou"
#property version   "1.00"
#property strict
#include <Trade\Trade.mqh>
CTrade trade;

//+------------------------------------------------------------------+
//|                      USER INPUTS                                 |
//+------------------------------------------------------------------+
// Position sizing & risk
input double Lots               = 0.10;   // Lot size per trade
input int    Slippage           = 3;      // Maximum slippage in points
input int    MaxTradesPerDir    = 5;      // Max open buys or sells at once
input double KillSwitchLoss     = 100.0;  // Daily net loss (account currency) to halt entries
input int    EntryOffsetPoints  = 30;     // 30 points beyond ±2σ if true ±3σ not breached

// Bollinger Bands (all use PERIOD_M5)
input int    BB_Period          = 20;     // Period for all BB sets
input double BB_StdDevInner     = 1.0;    // ±1σ
input double BB_StdDevMiddle    = 2.0;    // ±2σ
input double BB_StdDevOuter     = 3.0;    // ±3σ

// Parabolic SAR (PERIOD_M5)
input double SAR_Step           = 0.01;   // Very tight SAR step
input double SAR_Maximum        = 0.15;   // SAR max

// Stop-Loss / Take-Profit (in “points”)
input double MR_StopLoss        = 7;      // 7 points (e.g. 0.7 pips on 5-digit)
input double MR_TakeProfit      = 10;     // 10 points

//+------------------------------------------------------------------+
//|                     INTERNAL VARS                                 |
//+------------------------------------------------------------------+
int      hBB_inner   = INVALID_HANDLE;  // ±1σ BB handle
int      hBB_middle  = INVALID_HANDLE;  // ±2σ BB handle
int      hBB_outer   = INVALID_HANDLE;  // ±3σ BB handle
int      hSAR_handle = INVALID_HANDLE;  // Parabolic SAR handle

bool     initialized      = false;
datetime lastTradeBarTime = 0;          // one-per-bar guard

//+------------------------------------------------------------------+
//| Expert initialization                                           |
//+------------------------------------------------------------------+
int OnInit()
  {
   // 1) Create three Bollinger Band handles on M5:
   hBB_inner  = iBands(_Symbol, PERIOD_M5, BB_Period, (int)BB_StdDevInner,  0, PRICE_CLOSE);
   hBB_middle = iBands(_Symbol, PERIOD_M5, BB_Period, (int)BB_StdDevMiddle, 0, PRICE_CLOSE);
   hBB_outer  = iBands(_Symbol, PERIOD_M5, BB_Period, (int)BB_StdDevOuter,  0, PRICE_CLOSE);

   // 2) Create Parabolic SAR handle on M5:
   hSAR_handle = iSAR(_Symbol, PERIOD_M5, SAR_Step, SAR_Maximum);

   // If any handle failed, abort
   if(hBB_inner == INVALID_HANDLE || hBB_middle == INVALID_HANDLE ||
      hBB_outer == INVALID_HANDLE || hSAR_handle == INVALID_HANDLE)
     {
      Print("⁉️ Initialization failed: could not create BB or SAR handle");
      return(INIT_FAILED);
     }

   initialized = true;
   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Expert deinitialization                                         |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   if(hBB_inner  != INVALID_HANDLE) IndicatorRelease(hBB_inner);
   if(hBB_middle != INVALID_HANDLE) IndicatorRelease(hBB_middle);
   if(hBB_outer  != INVALID_HANDLE) IndicatorRelease(hBB_outer);
   if(hSAR_handle != INVALID_HANDLE) IndicatorRelease(hSAR_handle);
  }

//+------------------------------------------------------------------+
//| Expert tick                                                     |
//+------------------------------------------------------------------+
void OnTick()
  {
   if(!initialized) 
      return;

   // 1) Wait until we have enough M5 bars (BB_Period + a small buffer):
   if(iBars(_Symbol, PERIOD_M5) < BB_Period + 5)
      return;

   // 2) Daily kill-switch: if today’s net P/L ≤ –KillSwitchLoss, stop entries
   if(GetTodaysNetPL() <= -KillSwitchLoss)
      return;

   // 3) Ensure only one trade per 5-minute candle:
   datetime thisBarTime = iTime(_Symbol, PERIOD_M5, 0);
   if(thisBarTime == lastTradeBarTime)
      return;

   // 4) Count open positions per side:
   int buysOpen  = CountOpenPositions(ORDER_TYPE_BUY);
   int sellsOpen = CountOpenPositions(ORDER_TYPE_SELL);

   // 5) Run scalp logic (true if a trade was placed):
   bool traded = ScalpLogic(buysOpen, sellsOpen);

   // 6) If we placed a trade, stamp this bar’s time so we don’t trade again until next bar
   if(traded)
   {
      lastTradeBarTime = thisBarTime;
   }
  }

//+------------------------------------------------------------------+
//| Count how many open positions of a given ORDER_TYPE exist       |
//+------------------------------------------------------------------+
int CountOpenPositions(const ENUM_ORDER_TYPE type)
  {
   int cnt = 0;
   for(int i = 0; i < PositionsTotal(); i++)
   {
      if(PositionGetSymbol(i) == _Symbol &&
         (ENUM_ORDER_TYPE)PositionGetInteger(POSITION_TYPE) == type)
         cnt++;
   }
   return(cnt);
  }

//+------------------------------------------------------------------+
//| Calculate today’s net profit/loss (negative if losing)          |
//+------------------------------------------------------------------+
double GetTodaysNetPL()
  {
   static datetime lastDay      = 0;
   static double   cumulProfit  = 0.0;

   datetime now = TimeCurrent();
   MqlDateTime tm;
   TimeToStruct(now, tm);

   // Build a MqlDateTime for midnight of today
   MqlDateTime zeroTime;
   zeroTime.year  = tm.year;
   zeroTime.mon   = tm.mon;
   zeroTime.day   = tm.day;
   zeroTime.hour = 0;
   zeroTime.min   = 0;
   zeroTime.sec   = 0;
   datetime todayStart = StructToTime(zeroTime);

   if(todayStart != lastDay)
   {
      // New day → reset and sum up all closed‐trade profits since midnight
      lastDay     = todayStart;
      cumulProfit = 0.0;
      HistorySelect(todayStart, now);

      for(int i = 0; i < HistoryDealsTotal(); i++)
      {
         ulong ticket = HistoryDealGetTicket(i);
         if(HistoryDealGetInteger(ticket, DEAL_ENTRY) == DEAL_ENTRY_OUT)
         {
            cumulProfit += HistoryDealGetDouble(ticket, DEAL_PROFIT);
         }
      }
   }
   return(cumulProfit);
  }

//+------------------------------------------------------------------+
//| Scalp logic: returns true if a buy or sell was placed this call  |
//+------------------------------------------------------------------+
bool ScalpLogic(int buysOpen, int sellsOpen)
  {
   // 1) Fetch the latest Bollinger Band buffers (all three envelopes) and SAR
   double upper1[1], mid1[1], lower1[1];  // ±1 σ
   double upper2[1], mid2[1], lower2[1];  // ±2 σ
   double upper3[1], mid3[1], lower3[1];  // ±3 σ
   double sarVal[1];

   if(CopyBuffer(hBB_inner,  0, 0, 1, upper1)  <= 0) return false; // ±1σ upper
   if(CopyBuffer(hBB_inner,  1, 0, 1, mid1)    <= 0) return false; // ±1σ mid
   if(CopyBuffer(hBB_inner,  2, 0, 1, lower1)  <= 0) return false; // ±1σ lower

   if(CopyBuffer(hBB_middle, 0, 0, 1, upper2)  <= 0) return false; // ±2σ upper
   if(CopyBuffer(hBB_middle, 1, 0, 1, mid2)    <= 0) return false; // ±2σ mid
   if(CopyBuffer(hBB_middle, 2, 0, 1, lower2)  <= 0) return false; // ±2σ lower

   if(CopyBuffer(hBB_outer,  0, 0, 1, upper3)  <= 0) return false; // ±3σ upper
   if(CopyBuffer(hBB_outer,  1, 0, 1, mid3)    <= 0) return false; // ±3σ mid
   if(CopyBuffer(hBB_outer,  2, 0, 1, lower3)  <= 0) return false; // ±3σ lower

   if(CopyBuffer(hSAR_handle, 0, 0, 1, sarVal)  <= 0) return false; // SAR

   double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);

   // 2) Calculate 30-point offset in price terms:
   double offset = EntryOffsetPoints * _Point;

   // --- PRIMARY BUY: true ±3σ breach & SAR still above price & slot available ---
   if(buysOpen < MaxTradesPerDir 
      && bid < lower3[0]     // price is below ±3σ Lower
      && sarVal[0] > bid)    // SAR dot still above price
   {
      trade.SetDeviationInPoints(Slippage);
      if(trade.Buy(Lots,
                   _Symbol,
                   ask,
                   ask - MR_StopLoss  * _Point,   // StopLoss
                   ask + MR_TakeProfit * _Point)) // TakeProfit
      {
         return true;
      }
   }

   // --- SECONDARY BUY: ±2σ breach − 30 points & SAR above price & slot available ---
   if(buysOpen < MaxTradesPerDir 
      && bid < (lower2[0] - offset)  // price is 30 points below ±2σ Lower
      && sarVal[0] > bid)            // SAR still above price
   {
      trade.SetDeviationInPoints(Slippage);
      if(trade.Buy(Lots,
                   _Symbol,
                   ask,
                   ask - MR_StopLoss  * _Point,
                   ask + MR_TakeProfit * _Point))
      {
         return true;
      }
   }

   // --- PRIMARY SELL: true ±3σ breach & SAR still below price & slot available ---
   if(sellsOpen < MaxTradesPerDir 
      && ask > upper3[0]     // price is above ±3σ Upper
      && sarVal[0] < ask)    // SAR dot still below price
   {
      trade.SetDeviationInPoints(Slippage);
      if(trade.Sell(Lots,
                    _Symbol,
                    bid,
                    bid + MR_StopLoss  * _Point,   // StopLoss
                    bid - MR_TakeProfit * _Point)) // TakeProfit
      {
         return true;
      }
   }

   // --- SECONDARY SELL: ±2σ breach + 30 points & SAR below price & slot available ---
   if(sellsOpen < MaxTradesPerDir 
      && ask > (upper2[0] + offset)  // price is 30 points above ±2σ Upper
      && sarVal[0] < ask)            // SAR still below price
   {
      trade.SetDeviationInPoints(Slippage);
      if(trade.Sell(Lots,
                    _Symbol,
                    bid,
                    bid + MR_StopLoss  * _Point,
                    bid - MR_TakeProfit * _Point))
      {
         return true;
      }
   }

   // If we reach here, no order was placed this bar
   return false;
  }
//+------------------------------------------------------------------+
